// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Buy extends ethereum.Event {
  get params(): Buy__Params {
    return new Buy__Params(this);
  }
}

export class Buy__Params {
  _event: Buy;

  constructor(event: Buy) {
    this._event = event;
  }

  get bidID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get askID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get vol(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amt(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Cancel extends ethereum.Event {
  get params(): Cancel__Params {
    return new Cancel__Params(this);
  }
}

export class Cancel__Params {
  _event: Cancel;

  constructor(event: Cancel) {
    this._event = event;
  }

  get askID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get long(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get vol(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Claim extends ethereum.Event {
  get params(): Claim__Params {
    return new Claim__Params(this);
  }
}

export class Claim__Params {
  _event: Claim;

  constructor(event: Claim) {
    this._event = event;
  }

  get seller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amt(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get claimed(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Exercise extends ethereum.Event {
  get params(): Exercise__Params {
    return new Exercise__Params(this);
  }
}

export class Exercise__Params {
  _event: Exercise;

  constructor(event: Exercise) {
    this._event = event;
  }

  get bidID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get vol(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amt(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class GovernorshipTransferred extends ethereum.Event {
  get params(): GovernorshipTransferred__Params {
    return new GovernorshipTransferred__Params(this);
  }
}

export class GovernorshipTransferred__Params {
  _event: GovernorshipTransferred;

  constructor(event: GovernorshipTransferred) {
    this._event = event;
  }

  get previousGovernor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newGovernor(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Reprice extends ethereum.Event {
  get params(): Reprice__Params {
    return new Reprice__Params(this);
  }
}

export class Reprice__Params {
  _event: Reprice;

  constructor(event: Reprice) {
    this._event = event;
  }

  get askID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newAskID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get long(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get volume(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get settleToken(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get newPrice(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class Sell extends ethereum.Event {
  get params(): Sell__Params {
    return new Sell__Params(this);
  }
}

export class Sell__Params {
  _event: Sell;

  constructor(event: Sell) {
    this._event = event;
  }

  get askID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get long(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get volume(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get settleToken(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class SettleReward extends ethereum.Event {
  get params(): SettleReward__Params {
    return new SettleReward__Params(this);
  }
}

export class SettleReward__Params {
  _event: SettleReward;

  constructor(event: SettleReward) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _collateral(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _underlying(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get volume(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amt(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get settled(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Waive extends ethereum.Event {
  get params(): Waive__Params {
    return new Waive__Params(this);
  }
}

export class Waive__Params {
  _event: Waive;

  constructor(event: Waive) {
    this._event = event;
  }

  get bidID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get vol(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OptionOrder__asksResult {
  value0: BigInt;
  value1: Address;
  value2: Address;
  value3: BigInt;
  value4: Address;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: Address,
    value3: BigInt,
    value4: Address,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }
}

export class OptionOrder__bidsResult {
  value0: BigInt;
  value1: BigInt;
  value2: Address;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: Address,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class OptionOrder__buyResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class OptionOrder__calcFeeResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class OptionOrder__exerciseResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class OptionOrder__exercise1Result {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class OptionOrder__exercise2Result {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class OptionOrder__exercise3Result {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class OptionOrder extends ethereum.SmartContract {
  static bind(address: Address): OptionOrder {
    return new OptionOrder("OptionOrder", address);
  }

  asks(param0: BigInt): OptionOrder__asksResult {
    let result = super.call(
      "asks",
      "asks(uint256):(uint256,address,address,uint256,address,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new OptionOrder__asksResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_asks(param0: BigInt): ethereum.CallResult<OptionOrder__asksResult> {
    let result = super.tryCall(
      "asks",
      "asks(uint256):(uint256,address,address,uint256,address,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionOrder__asksResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  asksN(): BigInt {
    let result = super.call("asksN", "asksN():(uint256)", []);

    return result[0].toBigInt();
  }

  try_asksN(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("asksN", "asksN():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  begin(): BigInt {
    let result = super.call("begin", "begin():(uint256)", []);

    return result[0].toBigInt();
  }

  try_begin(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("begin", "begin():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bids(param0: BigInt): OptionOrder__bidsResult {
    let result = super.call(
      "bids",
      "bids(uint256):(uint256,uint256,address,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new OptionOrder__bidsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_bids(param0: BigInt): ethereum.CallResult<OptionOrder__bidsResult> {
    let result = super.tryCall(
      "bids",
      "bids(uint256):(uint256,uint256,address,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionOrder__bidsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  bidsN(): BigInt {
    let result = super.call("bidsN", "bidsN():(uint256)", []);

    return result[0].toBigInt();
  }

  try_bidsN(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("bidsN", "bidsN():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  buy(askID: BigInt, volume: BigInt): OptionOrder__buyResult {
    let result = super.call(
      "buy",
      "buy(uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(askID),
        ethereum.Value.fromUnsignedBigInt(volume)
      ]
    );

    return new OptionOrder__buyResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_buy(
    askID: BigInt,
    volume: BigInt
  ): ethereum.CallResult<OptionOrder__buyResult> {
    let result = super.tryCall(
      "buy",
      "buy(uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(askID),
        ethereum.Value.fromUnsignedBigInt(volume)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionOrder__buyResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  calcFee(volume: BigInt): OptionOrder__calcFeeResult {
    let result = super.call("calcFee", "calcFee(uint256):(address,uint256)", [
      ethereum.Value.fromUnsignedBigInt(volume)
    ]);

    return new OptionOrder__calcFeeResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_calcFee(volume: BigInt): ethereum.CallResult<OptionOrder__calcFeeResult> {
    let result = super.tryCall(
      "calcFee",
      "calcFee(uint256):(address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(volume)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionOrder__calcFeeResult(value[0].toAddress(), value[1].toBigInt())
    );
  }

  calcFrequency(): BigInt {
    let result = super.call("calcFrequency", "calcFrequency():(uint256)", []);

    return result[0].toBigInt();
  }

  try_calcFrequency(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcFrequency",
      "calcFrequency():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cancel(askID: BigInt): BigInt {
    let result = super.call("cancel", "cancel(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(askID)
    ]);

    return result[0].toBigInt();
  }

  try_cancel(askID: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("cancel", "cancel(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(askID)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claim(): BigInt {
    let result = super.call("claim", "claim():(uint256)", []);

    return result[0].toBigInt();
  }

  try_claim(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("claim", "claim():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimable(buyer: Address): BigInt {
    let result = super.call("claimable", "claimable(address):(uint256)", [
      ethereum.Value.fromAddress(buyer)
    ]);

    return result[0].toBigInt();
  }

  try_claimable(buyer: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("claimable", "claimable(address):(uint256)", [
      ethereum.Value.fromAddress(buyer)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimedRewards(param0: Address): BigInt {
    let result = super.call(
      "claimedRewards",
      "claimedRewards(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_claimedRewards(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimedRewards",
      "claimedRewards(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  earned(account: Address): BigInt {
    let result = super.call("earned", "earned(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_earned(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("earned", "earned(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  exercise(bidID: BigInt, path: Array<Address>): OptionOrder__exerciseResult {
    let result = super.call(
      "exercise",
      "exercise(uint256,address[]):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(bidID),
        ethereum.Value.fromAddressArray(path)
      ]
    );

    return new OptionOrder__exerciseResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_exercise(
    bidID: BigInt,
    path: Array<Address>
  ): ethereum.CallResult<OptionOrder__exerciseResult> {
    let result = super.tryCall(
      "exercise",
      "exercise(uint256,address[]):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(bidID),
        ethereum.Value.fromAddressArray(path)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionOrder__exerciseResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  exercise1(bidID: BigInt, volume: BigInt): OptionOrder__exercise1Result {
    let result = super.call(
      "exercise",
      "exercise(uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(bidID),
        ethereum.Value.fromUnsignedBigInt(volume)
      ]
    );

    return new OptionOrder__exercise1Result(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_exercise1(
    bidID: BigInt,
    volume: BigInt
  ): ethereum.CallResult<OptionOrder__exercise1Result> {
    let result = super.tryCall(
      "exercise",
      "exercise(uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(bidID),
        ethereum.Value.fromUnsignedBigInt(volume)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionOrder__exercise1Result(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  exercise2(bidID: BigInt): OptionOrder__exercise2Result {
    let result = super.call(
      "exercise",
      "exercise(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(bidID)]
    );

    return new OptionOrder__exercise2Result(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_exercise2(
    bidID: BigInt
  ): ethereum.CallResult<OptionOrder__exercise2Result> {
    let result = super.tryCall(
      "exercise",
      "exercise(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(bidID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionOrder__exercise2Result(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  exercise3(
    bidID: BigInt,
    volume: BigInt,
    path: Array<Address>
  ): OptionOrder__exercise3Result {
    let result = super.call(
      "exercise",
      "exercise(uint256,uint256,address[]):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(bidID),
        ethereum.Value.fromUnsignedBigInt(volume),
        ethereum.Value.fromAddressArray(path)
      ]
    );

    return new OptionOrder__exercise3Result(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_exercise3(
    bidID: BigInt,
    volume: BigInt,
    path: Array<Address>
  ): ethereum.CallResult<OptionOrder__exercise3Result> {
    let result = super.tryCall(
      "exercise",
      "exercise(uint256,uint256,address[]):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(bidID),
        ethereum.Value.fromUnsignedBigInt(volume),
        ethereum.Value.fromAddressArray(path)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionOrder__exercise3Result(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  farm(): Address {
    let result = super.call("farm", "farm():(address)", []);

    return result[0].toAddress();
  }

  try_farm(): ethereum.CallResult<Address> {
    let result = super.tryCall("farm", "farm():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  frequency(): BigInt {
    let result = super.call("frequency", "frequency():(uint256)", []);

    return result[0].toBigInt();
  }

  try_frequency(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("frequency", "frequency():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getConfig(key: Bytes, addr: Address): BigInt {
    let result = super.call(
      "getConfig",
      "getConfig(bytes32,address):(uint256)",
      [ethereum.Value.fromFixedBytes(key), ethereum.Value.fromAddress(addr)]
    );

    return result[0].toBigInt();
  }

  try_getConfig(key: Bytes, addr: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getConfig",
      "getConfig(bytes32,address):(uint256)",
      [ethereum.Value.fromFixedBytes(key), ethereum.Value.fromAddress(addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getConfig1(key: Bytes): BigInt {
    let result = super.call("getConfig", "getConfig(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(key)
    ]);

    return result[0].toBigInt();
  }

  try_getConfig1(key: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getConfig", "getConfig(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(key)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getConfig2(key: Bytes, index: BigInt): BigInt {
    let result = super.call(
      "getConfig",
      "getConfig(bytes32,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(key),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_getConfig2(key: Bytes, index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getConfig",
      "getConfig(bytes32,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(key),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  governor(): Address {
    let result = super.call("governor", "governor():(address)", []);

    return result[0].toAddress();
  }

  try_governor(): ethereum.CallResult<Address> {
    let result = super.tryCall("governor", "governor():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lasttime(): BigInt {
    let result = super.call("lasttime", "lasttime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lasttime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lasttime", "lasttime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lep(): BigInt {
    let result = super.call("lep", "lep():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lep(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lep", "lep():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  period(): BigInt {
    let result = super.call("period", "period():(uint256)", []);

    return result[0].toBigInt();
  }

  try_period(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("period", "period():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reprice(askID: BigInt, newPrice: BigInt): BigInt {
    let result = super.call("reprice", "reprice(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(askID),
      ethereum.Value.fromUnsignedBigInt(newPrice)
    ]);

    return result[0].toBigInt();
  }

  try_reprice(askID: BigInt, newPrice: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "reprice",
      "reprice(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(askID),
        ethereum.Value.fromUnsignedBigInt(newPrice)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reward(): Address {
    let result = super.call("reward", "reward():(address)", []);

    return result[0].toAddress();
  }

  try_reward(): ethereum.CallResult<Address> {
    let result = super.tryCall("reward", "reward():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardThreshold(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "rewardThreshold",
      "rewardThreshold(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_rewardThreshold(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardThreshold",
      "rewardThreshold(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sell(
    _private: boolean,
    _collateral: Address,
    _underlying: Address,
    _strikePrice: BigInt,
    _expiry: BigInt,
    volume: BigInt,
    settleToken: Address,
    price: BigInt
  ): BigInt {
    let result = super.call(
      "sell",
      "sell(bool,address,address,uint256,uint256,uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromBoolean(_private),
        ethereum.Value.fromAddress(_collateral),
        ethereum.Value.fromAddress(_underlying),
        ethereum.Value.fromUnsignedBigInt(_strikePrice),
        ethereum.Value.fromUnsignedBigInt(_expiry),
        ethereum.Value.fromUnsignedBigInt(volume),
        ethereum.Value.fromAddress(settleToken),
        ethereum.Value.fromUnsignedBigInt(price)
      ]
    );

    return result[0].toBigInt();
  }

  try_sell(
    _private: boolean,
    _collateral: Address,
    _underlying: Address,
    _strikePrice: BigInt,
    _expiry: BigInt,
    volume: BigInt,
    settleToken: Address,
    price: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sell",
      "sell(bool,address,address,uint256,uint256,uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromBoolean(_private),
        ethereum.Value.fromAddress(_collateral),
        ethereum.Value.fromAddress(_underlying),
        ethereum.Value.fromUnsignedBigInt(_strikePrice),
        ethereum.Value.fromUnsignedBigInt(_expiry),
        ethereum.Value.fromUnsignedBigInt(volume),
        ethereum.Value.fromAddress(settleToken),
        ethereum.Value.fromUnsignedBigInt(price)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sell1(
    long: Address,
    volume: BigInt,
    settleToken: Address,
    price: BigInt
  ): BigInt {
    let result = super.call(
      "sell",
      "sell(address,uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(long),
        ethereum.Value.fromUnsignedBigInt(volume),
        ethereum.Value.fromAddress(settleToken),
        ethereum.Value.fromUnsignedBigInt(price)
      ]
    );

    return result[0].toBigInt();
  }

  try_sell1(
    long: Address,
    volume: BigInt,
    settleToken: Address,
    price: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sell",
      "sell(address,uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(long),
        ethereum.Value.fromUnsignedBigInt(volume),
        ethereum.Value.fromAddress(settleToken),
        ethereum.Value.fromUnsignedBigInt(price)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  settleableReward(): BigInt {
    let result = super.call(
      "settleableReward",
      "settleableReward():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_settleableReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "settleableReward",
      "settleableReward():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  settleableReward1(
    _collateral: Address,
    _underlying: Address,
    volume: BigInt
  ): BigInt {
    let result = super.call(
      "settleableReward",
      "settleableReward(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_collateral),
        ethereum.Value.fromAddress(_underlying),
        ethereum.Value.fromUnsignedBigInt(volume)
      ]
    );

    return result[0].toBigInt();
  }

  try_settleableReward1(
    _collateral: Address,
    _underlying: Address,
    volume: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "settleableReward",
      "settleableReward(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_collateral),
        ethereum.Value.fromAddress(_underlying),
        ethereum.Value.fromUnsignedBigInt(volume)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  settledRewards(param0: Address): BigInt {
    let result = super.call(
      "settledRewards",
      "settledRewards(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_settledRewards(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "settledRewards",
      "settledRewards(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  span(): BigInt {
    let result = super.call("span", "span():(uint256)", []);

    return result[0].toBigInt();
  }

  try_span(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("span", "span():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  times(): BigInt {
    let result = super.call("times", "times():(uint256)", []);

    return result[0].toBigInt();
  }

  try_times(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("times", "times():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  waive(bidID: BigInt, volume: BigInt): BigInt {
    let result = super.call("waive", "waive(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(bidID),
      ethereum.Value.fromUnsignedBigInt(volume)
    ]);

    return result[0].toBigInt();
  }

  try_waive(bidID: BigInt, volume: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("waive", "waive(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(bidID),
      ethereum.Value.fromUnsignedBigInt(volume)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class BuyCall extends ethereum.Call {
  get inputs(): BuyCall__Inputs {
    return new BuyCall__Inputs(this);
  }

  get outputs(): BuyCall__Outputs {
    return new BuyCall__Outputs(this);
  }
}

export class BuyCall__Inputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }

  get askID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get volume(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyCall__Outputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }

  get bidID(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get vol(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get amt(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class BuyInETHCall extends ethereum.Call {
  get inputs(): BuyInETHCall__Inputs {
    return new BuyInETHCall__Inputs(this);
  }

  get outputs(): BuyInETHCall__Outputs {
    return new BuyInETHCall__Outputs(this);
  }
}

export class BuyInETHCall__Inputs {
  _call: BuyInETHCall;

  constructor(call: BuyInETHCall) {
    this._call = call;
  }

  get askID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get volume(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyInETHCall__Outputs {
  _call: BuyInETHCall;

  constructor(call: BuyInETHCall) {
    this._call = call;
  }

  get bidID(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get vol(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get amt(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class CancelCall extends ethereum.Call {
  get inputs(): CancelCall__Inputs {
    return new CancelCall__Inputs(this);
  }

  get outputs(): CancelCall__Outputs {
    return new CancelCall__Outputs(this);
  }
}

export class CancelCall__Inputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }

  get askID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelCall__Outputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }

  get vol(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get amt(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ExerciseCall extends ethereum.Call {
  get inputs(): ExerciseCall__Inputs {
    return new ExerciseCall__Inputs(this);
  }

  get outputs(): ExerciseCall__Outputs {
    return new ExerciseCall__Outputs(this);
  }
}

export class ExerciseCall__Inputs {
  _call: ExerciseCall;

  constructor(call: ExerciseCall) {
    this._call = call;
  }

  get bidID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get path(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class ExerciseCall__Outputs {
  _call: ExerciseCall;

  constructor(call: ExerciseCall) {
    this._call = call;
  }

  get vol(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get fee(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get amt(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class Exercise1Call extends ethereum.Call {
  get inputs(): Exercise1Call__Inputs {
    return new Exercise1Call__Inputs(this);
  }

  get outputs(): Exercise1Call__Outputs {
    return new Exercise1Call__Outputs(this);
  }
}

export class Exercise1Call__Inputs {
  _call: Exercise1Call;

  constructor(call: Exercise1Call) {
    this._call = call;
  }

  get bidID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get volume(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Exercise1Call__Outputs {
  _call: Exercise1Call;

  constructor(call: Exercise1Call) {
    this._call = call;
  }

  get vol(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get fee(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get amt(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class Exercise2Call extends ethereum.Call {
  get inputs(): Exercise2Call__Inputs {
    return new Exercise2Call__Inputs(this);
  }

  get outputs(): Exercise2Call__Outputs {
    return new Exercise2Call__Outputs(this);
  }
}

export class Exercise2Call__Inputs {
  _call: Exercise2Call;

  constructor(call: Exercise2Call) {
    this._call = call;
  }

  get bidID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class Exercise2Call__Outputs {
  _call: Exercise2Call;

  constructor(call: Exercise2Call) {
    this._call = call;
  }

  get vol(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get fee(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get amt(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class Exercise3Call extends ethereum.Call {
  get inputs(): Exercise3Call__Inputs {
    return new Exercise3Call__Inputs(this);
  }

  get outputs(): Exercise3Call__Outputs {
    return new Exercise3Call__Outputs(this);
  }
}

export class Exercise3Call__Inputs {
  _call: Exercise3Call;

  constructor(call: Exercise3Call) {
    this._call = call;
  }

  get bidID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get volume(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get path(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }
}

export class Exercise3Call__Outputs {
  _call: Exercise3Call;

  constructor(call: Exercise3Call) {
    this._call = call;
  }

  get vol(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get fee(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get amt(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class ExerciseETHCall extends ethereum.Call {
  get inputs(): ExerciseETHCall__Inputs {
    return new ExerciseETHCall__Inputs(this);
  }

  get outputs(): ExerciseETHCall__Outputs {
    return new ExerciseETHCall__Outputs(this);
  }
}

export class ExerciseETHCall__Inputs {
  _call: ExerciseETHCall;

  constructor(call: ExerciseETHCall) {
    this._call = call;
  }

  get bidID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ExerciseETHCall__Outputs {
  _call: ExerciseETHCall;

  constructor(call: ExerciseETHCall) {
    this._call = call;
  }

  get vol(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get fee(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get amt(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class ExerciseETH1Call extends ethereum.Call {
  get inputs(): ExerciseETH1Call__Inputs {
    return new ExerciseETH1Call__Inputs(this);
  }

  get outputs(): ExerciseETH1Call__Outputs {
    return new ExerciseETH1Call__Outputs(this);
  }
}

export class ExerciseETH1Call__Inputs {
  _call: ExerciseETH1Call;

  constructor(call: ExerciseETH1Call) {
    this._call = call;
  }

  get bidID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get volume(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ExerciseETH1Call__Outputs {
  _call: ExerciseETH1Call;

  constructor(call: ExerciseETH1Call) {
    this._call = call;
  }

  get vol(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get fee(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get amt(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class GetRewardCall extends ethereum.Call {
  get inputs(): GetRewardCall__Inputs {
    return new GetRewardCall__Inputs(this);
  }

  get outputs(): GetRewardCall__Outputs {
    return new GetRewardCall__Outputs(this);
  }
}

export class GetRewardCall__Inputs {
  _call: GetRewardCall;

  constructor(call: GetRewardCall) {
    this._call = call;
  }
}

export class GetRewardCall__Outputs {
  _call: GetRewardCall;

  constructor(call: GetRewardCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _governor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _factory(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _farm(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _reward(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _ecoAddr(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class Initialize1Call extends ethereum.Call {
  get inputs(): Initialize1Call__Inputs {
    return new Initialize1Call__Inputs(this);
  }

  get outputs(): Initialize1Call__Outputs {
    return new Initialize1Call__Outputs(this);
  }
}

export class Initialize1Call__Inputs {
  _call: Initialize1Call;

  constructor(call: Initialize1Call) {
    this._call = call;
  }

  get governor_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Initialize1Call__Outputs {
  _call: Initialize1Call;

  constructor(call: Initialize1Call) {
    this._call = call;
  }
}

export class RenounceGovernorshipCall extends ethereum.Call {
  get inputs(): RenounceGovernorshipCall__Inputs {
    return new RenounceGovernorshipCall__Inputs(this);
  }

  get outputs(): RenounceGovernorshipCall__Outputs {
    return new RenounceGovernorshipCall__Outputs(this);
  }
}

export class RenounceGovernorshipCall__Inputs {
  _call: RenounceGovernorshipCall;

  constructor(call: RenounceGovernorshipCall) {
    this._call = call;
  }
}

export class RenounceGovernorshipCall__Outputs {
  _call: RenounceGovernorshipCall;

  constructor(call: RenounceGovernorshipCall) {
    this._call = call;
  }
}

export class RepriceCall extends ethereum.Call {
  get inputs(): RepriceCall__Inputs {
    return new RepriceCall__Inputs(this);
  }

  get outputs(): RepriceCall__Outputs {
    return new RepriceCall__Outputs(this);
  }
}

export class RepriceCall__Inputs {
  _call: RepriceCall;

  constructor(call: RepriceCall) {
    this._call = call;
  }

  get askID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RepriceCall__Outputs {
  _call: RepriceCall;

  constructor(call: RepriceCall) {
    this._call = call;
  }

  get newAskID(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SellCall extends ethereum.Call {
  get inputs(): SellCall__Inputs {
    return new SellCall__Inputs(this);
  }

  get outputs(): SellCall__Outputs {
    return new SellCall__Outputs(this);
  }
}

export class SellCall__Inputs {
  _call: SellCall;

  constructor(call: SellCall) {
    this._call = call;
  }

  get _private(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get _collateral(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _underlying(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _strikePrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _expiry(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get volume(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get settleToken(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get price(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class SellCall__Outputs {
  _call: SellCall;

  constructor(call: SellCall) {
    this._call = call;
  }

  get askID(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class Sell1Call extends ethereum.Call {
  get inputs(): Sell1Call__Inputs {
    return new Sell1Call__Inputs(this);
  }

  get outputs(): Sell1Call__Outputs {
    return new Sell1Call__Outputs(this);
  }
}

export class Sell1Call__Inputs {
  _call: Sell1Call;

  constructor(call: Sell1Call) {
    this._call = call;
  }

  get long(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get volume(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get settleToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get price(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class Sell1Call__Outputs {
  _call: Sell1Call;

  constructor(call: Sell1Call) {
    this._call = call;
  }

  get askID(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SellOnETHCall extends ethereum.Call {
  get inputs(): SellOnETHCall__Inputs {
    return new SellOnETHCall__Inputs(this);
  }

  get outputs(): SellOnETHCall__Outputs {
    return new SellOnETHCall__Outputs(this);
  }
}

export class SellOnETHCall__Inputs {
  _call: SellOnETHCall;

  constructor(call: SellOnETHCall) {
    this._call = call;
  }

  get _private(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get _underlying(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _strikePrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _expiry(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get settleToken(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get price(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class SellOnETHCall__Outputs {
  _call: SellOnETHCall;

  constructor(call: SellOnETHCall) {
    this._call = call;
  }

  get askID(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetBeginCall extends ethereum.Call {
  get inputs(): SetBeginCall__Inputs {
    return new SetBeginCall__Inputs(this);
  }

  get outputs(): SetBeginCall__Outputs {
    return new SetBeginCall__Outputs(this);
  }
}

export class SetBeginCall__Inputs {
  _call: SetBeginCall;

  constructor(call: SetBeginCall) {
    this._call = call;
  }

  get _lep(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _period(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _span(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _begin(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SetBeginCall__Outputs {
  _call: SetBeginCall;

  constructor(call: SetBeginCall) {
    this._call = call;
  }
}

export class SetConfigCall extends ethereum.Call {
  get inputs(): SetConfigCall__Inputs {
    return new SetConfigCall__Inputs(this);
  }

  get outputs(): SetConfigCall__Outputs {
    return new SetConfigCall__Outputs(this);
  }
}

export class SetConfigCall__Inputs {
  _call: SetConfigCall;

  constructor(call: SetConfigCall) {
    this._call = call;
  }

  get key(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetConfigCall__Outputs {
  _call: SetConfigCall;

  constructor(call: SetConfigCall) {
    this._call = call;
  }
}

export class SetConfig1Call extends ethereum.Call {
  get inputs(): SetConfig1Call__Inputs {
    return new SetConfig1Call__Inputs(this);
  }

  get outputs(): SetConfig1Call__Outputs {
    return new SetConfig1Call__Outputs(this);
  }
}

export class SetConfig1Call__Inputs {
  _call: SetConfig1Call;

  constructor(call: SetConfig1Call) {
    this._call = call;
  }

  get key(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get addr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetConfig1Call__Outputs {
  _call: SetConfig1Call;

  constructor(call: SetConfig1Call) {
    this._call = call;
  }
}

export class SetConfig2Call extends ethereum.Call {
  get inputs(): SetConfig2Call__Inputs {
    return new SetConfig2Call__Inputs(this);
  }

  get outputs(): SetConfig2Call__Outputs {
    return new SetConfig2Call__Outputs(this);
  }
}

export class SetConfig2Call__Inputs {
  _call: SetConfig2Call;

  constructor(call: SetConfig2Call) {
    this._call = call;
  }

  get key(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get index(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetConfig2Call__Outputs {
  _call: SetConfig2Call;

  constructor(call: SetConfig2Call) {
    this._call = call;
  }
}

export class SetRewardThresholdCall extends ethereum.Call {
  get inputs(): SetRewardThresholdCall__Inputs {
    return new SetRewardThresholdCall__Inputs(this);
  }

  get outputs(): SetRewardThresholdCall__Outputs {
    return new SetRewardThresholdCall__Outputs(this);
  }
}

export class SetRewardThresholdCall__Inputs {
  _call: SetRewardThresholdCall;

  constructor(call: SetRewardThresholdCall) {
    this._call = call;
  }

  get _collateral(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _underlying(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get volume(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetRewardThresholdCall__Outputs {
  _call: SetRewardThresholdCall;

  constructor(call: SetRewardThresholdCall) {
    this._call = call;
  }
}

export class TransferGovernorshipCall extends ethereum.Call {
  get inputs(): TransferGovernorshipCall__Inputs {
    return new TransferGovernorshipCall__Inputs(this);
  }

  get outputs(): TransferGovernorshipCall__Outputs {
    return new TransferGovernorshipCall__Outputs(this);
  }
}

export class TransferGovernorshipCall__Inputs {
  _call: TransferGovernorshipCall;

  constructor(call: TransferGovernorshipCall) {
    this._call = call;
  }

  get newGovernor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferGovernorshipCall__Outputs {
  _call: TransferGovernorshipCall;

  constructor(call: TransferGovernorshipCall) {
    this._call = call;
  }
}

export class WaiveCall extends ethereum.Call {
  get inputs(): WaiveCall__Inputs {
    return new WaiveCall__Inputs(this);
  }

  get outputs(): WaiveCall__Outputs {
    return new WaiveCall__Outputs(this);
  }
}

export class WaiveCall__Inputs {
  _call: WaiveCall;

  constructor(call: WaiveCall) {
    this._call = call;
  }

  get bidID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get volume(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WaiveCall__Outputs {
  _call: WaiveCall;

  constructor(call: WaiveCall) {
    this._call = call;
  }

  get vol(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class Waive1Call extends ethereum.Call {
  get inputs(): Waive1Call__Inputs {
    return new Waive1Call__Inputs(this);
  }

  get outputs(): Waive1Call__Outputs {
    return new Waive1Call__Outputs(this);
  }
}

export class Waive1Call__Inputs {
  _call: Waive1Call;

  constructor(call: Waive1Call) {
    this._call = call;
  }

  get bidID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class Waive1Call__Outputs {
  _call: Waive1Call;

  constructor(call: Waive1Call) {
    this._call = call;
  }
}
