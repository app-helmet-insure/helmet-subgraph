// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Burn extends ethereum.Event {
  get params(): Burn__Params {
    return new Burn__Params(this);
  }
}

export class Burn__Params {
  _event: Burn;

  constructor(event: Burn) {
    this._event = event;
  }

  get seller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _collateral(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _underlying(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get _strikePrice(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get _expiry(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get vol(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class Exercise extends ethereum.Event {
  get params(): Exercise__Params {
    return new Exercise__Params(this);
  }
}

export class Exercise__Params {
  _event: Exercise;

  constructor(event: Exercise) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _collateral(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _underlying(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _strikePrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _expiry(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get volume(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get vol(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get amt(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class GovernorshipTransferred extends ethereum.Event {
  get params(): GovernorshipTransferred__Params {
    return new GovernorshipTransferred__Params(this);
  }
}

export class GovernorshipTransferred__Params {
  _event: GovernorshipTransferred;

  constructor(event: GovernorshipTransferred) {
    this._event = event;
  }

  get previousGovernor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newGovernor(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get seller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _private(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get _collateral(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _underlying(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get _strikePrice(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get _expiry(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get long(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get short(): Address {
    return this._event.parameters[7].value.toAddress();
  }

  get vol(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class OptionCreated extends ethereum.Event {
  get params(): OptionCreated__Params {
    return new OptionCreated__Params(this);
  }
}

export class OptionCreated__Params {
  _event: OptionCreated;

  constructor(event: OptionCreated) {
    this._event = event;
  }

  get creator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _collateral(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _underlying(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _strikePrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _expiry(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get long(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get short(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get count(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class Settle extends ethereum.Event {
  get params(): Settle__Params {
    return new Settle__Params(this);
  }
}

export class Settle__Params {
  _event: Settle;

  constructor(event: Settle) {
    this._event = event;
  }

  get seller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _collateral(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _underlying(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get _strikePrice(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get _expiry(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get vol(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get col(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get und(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }
}

export class OptionFactory__burnResult {
  value0: Address;
  value1: Address;
  value2: BigInt;

  constructor(value0: Address, value1: Address, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class OptionFactory__burn1Result {
  value0: Address;
  value1: Address;
  value2: BigInt;

  constructor(value0: Address, value1: Address, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class OptionFactory__createOptionResult {
  value0: Address;
  value1: Address;

  constructor(value0: Address, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }
}

export class OptionFactory__exerciseResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class OptionFactory__exercise1Result {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class OptionFactory__exercise2Result {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class OptionFactory__exercise3Result {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class OptionFactory__exercise4Result {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class OptionFactory__exercise_Result {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class OptionFactory__mintResult {
  value0: Address;
  value1: Address;
  value2: BigInt;

  constructor(value0: Address, value1: Address, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class OptionFactory__mint1Result {
  value0: Address;
  value1: Address;
  value2: BigInt;

  constructor(value0: Address, value1: Address, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class OptionFactory__mint_Result {
  value0: Address;
  value1: Address;
  value2: BigInt;

  constructor(value0: Address, value1: Address, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class OptionFactory__settleResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class OptionFactory__settle1Result {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class OptionFactory__settle2Result {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class OptionFactory__settle_Result {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class OptionFactory__settleableResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class OptionFactory__settleable1Result {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class OptionFactory__settleable2Result {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class OptionFactory extends ethereum.SmartContract {
  static bind(address: Address): OptionFactory {
    return new OptionFactory("OptionFactory", address);
  }

  allLongs(param0: BigInt): Address {
    let result = super.call("allLongs", "allLongs(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_allLongs(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("allLongs", "allLongs(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allShorts(param0: BigInt): Address {
    let result = super.call("allShorts", "allShorts(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_allShorts(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("allShorts", "allShorts(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  burn(
    _creator: Address,
    _collateral: Address,
    _underlying: Address,
    _strikePrice: BigInt,
    _expiry: BigInt,
    volume: BigInt
  ): OptionFactory__burnResult {
    let result = super.call(
      "burn",
      "burn(address,address,address,uint256,uint256,uint256):(address,address,uint256)",
      [
        ethereum.Value.fromAddress(_creator),
        ethereum.Value.fromAddress(_collateral),
        ethereum.Value.fromAddress(_underlying),
        ethereum.Value.fromUnsignedBigInt(_strikePrice),
        ethereum.Value.fromUnsignedBigInt(_expiry),
        ethereum.Value.fromUnsignedBigInt(volume)
      ]
    );

    return new OptionFactory__burnResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt()
    );
  }

  try_burn(
    _creator: Address,
    _collateral: Address,
    _underlying: Address,
    _strikePrice: BigInt,
    _expiry: BigInt,
    volume: BigInt
  ): ethereum.CallResult<OptionFactory__burnResult> {
    let result = super.tryCall(
      "burn",
      "burn(address,address,address,uint256,uint256,uint256):(address,address,uint256)",
      [
        ethereum.Value.fromAddress(_creator),
        ethereum.Value.fromAddress(_collateral),
        ethereum.Value.fromAddress(_underlying),
        ethereum.Value.fromUnsignedBigInt(_strikePrice),
        ethereum.Value.fromUnsignedBigInt(_expiry),
        ethereum.Value.fromUnsignedBigInt(volume)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionFactory__burnResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt()
      )
    );
  }

  burn1(longOrShort: Address, volume: BigInt): OptionFactory__burn1Result {
    let result = super.call(
      "burn",
      "burn(address,uint256):(address,address,uint256)",
      [
        ethereum.Value.fromAddress(longOrShort),
        ethereum.Value.fromUnsignedBigInt(volume)
      ]
    );

    return new OptionFactory__burn1Result(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt()
    );
  }

  try_burn1(
    longOrShort: Address,
    volume: BigInt
  ): ethereum.CallResult<OptionFactory__burn1Result> {
    let result = super.tryCall(
      "burn",
      "burn(address,uint256):(address,address,uint256)",
      [
        ethereum.Value.fromAddress(longOrShort),
        ethereum.Value.fromUnsignedBigInt(volume)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionFactory__burn1Result(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt()
      )
    );
  }

  calcExerciseAmount(volume: BigInt, _strikePrice: BigInt): BigInt {
    let result = super.call(
      "calcExerciseAmount",
      "calcExerciseAmount(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(volume),
        ethereum.Value.fromUnsignedBigInt(_strikePrice)
      ]
    );

    return result[0].toBigInt();
  }

  try_calcExerciseAmount(
    volume: BigInt,
    _strikePrice: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcExerciseAmount",
      "calcExerciseAmount(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(volume),
        ethereum.Value.fromUnsignedBigInt(_strikePrice)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcExerciseAmount1(_long: Address, volume: BigInt): BigInt {
    let result = super.call(
      "calcExerciseAmount",
      "calcExerciseAmount(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_long),
        ethereum.Value.fromUnsignedBigInt(volume)
      ]
    );

    return result[0].toBigInt();
  }

  try_calcExerciseAmount1(
    _long: Address,
    volume: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcExerciseAmount",
      "calcExerciseAmount(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_long),
        ethereum.Value.fromUnsignedBigInt(volume)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createOption(
    _private: boolean,
    _collateral: Address,
    _underlying: Address,
    _strikePrice: BigInt,
    _expiry: BigInt
  ): OptionFactory__createOptionResult {
    let result = super.call(
      "createOption",
      "createOption(bool,address,address,uint256,uint256):(address,address)",
      [
        ethereum.Value.fromBoolean(_private),
        ethereum.Value.fromAddress(_collateral),
        ethereum.Value.fromAddress(_underlying),
        ethereum.Value.fromUnsignedBigInt(_strikePrice),
        ethereum.Value.fromUnsignedBigInt(_expiry)
      ]
    );

    return new OptionFactory__createOptionResult(
      result[0].toAddress(),
      result[1].toAddress()
    );
  }

  try_createOption(
    _private: boolean,
    _collateral: Address,
    _underlying: Address,
    _strikePrice: BigInt,
    _expiry: BigInt
  ): ethereum.CallResult<OptionFactory__createOptionResult> {
    let result = super.tryCall(
      "createOption",
      "createOption(bool,address,address,uint256,uint256):(address,address)",
      [
        ethereum.Value.fromBoolean(_private),
        ethereum.Value.fromAddress(_collateral),
        ethereum.Value.fromAddress(_underlying),
        ethereum.Value.fromUnsignedBigInt(_strikePrice),
        ethereum.Value.fromUnsignedBigInt(_expiry)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionFactory__createOptionResult(
        value[0].toAddress(),
        value[1].toAddress()
      )
    );
  }

  exercise(
    _long: Address,
    volume: BigInt,
    path: Array<Address>
  ): OptionFactory__exerciseResult {
    let result = super.call(
      "exercise",
      "exercise(address,uint256,address[]):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(_long),
        ethereum.Value.fromUnsignedBigInt(volume),
        ethereum.Value.fromAddressArray(path)
      ]
    );

    return new OptionFactory__exerciseResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_exercise(
    _long: Address,
    volume: BigInt,
    path: Array<Address>
  ): ethereum.CallResult<OptionFactory__exerciseResult> {
    let result = super.tryCall(
      "exercise",
      "exercise(address,uint256,address[]):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(_long),
        ethereum.Value.fromUnsignedBigInt(volume),
        ethereum.Value.fromAddressArray(path)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionFactory__exerciseResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  exercise1(long: Address): OptionFactory__exercise1Result {
    let result = super.call(
      "exercise",
      "exercise(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(long)]
    );

    return new OptionFactory__exercise1Result(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_exercise1(
    long: Address
  ): ethereum.CallResult<OptionFactory__exercise1Result> {
    let result = super.tryCall(
      "exercise",
      "exercise(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(long)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionFactory__exercise1Result(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  exercise2(
    _creator: Address,
    _collateral: Address,
    _underlying: Address,
    _strikePrice: BigInt,
    _expiry: BigInt,
    volume: BigInt,
    path: Array<Address>
  ): OptionFactory__exercise2Result {
    let result = super.call(
      "exercise",
      "exercise(address,address,address,uint256,uint256,uint256,address[]):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(_creator),
        ethereum.Value.fromAddress(_collateral),
        ethereum.Value.fromAddress(_underlying),
        ethereum.Value.fromUnsignedBigInt(_strikePrice),
        ethereum.Value.fromUnsignedBigInt(_expiry),
        ethereum.Value.fromUnsignedBigInt(volume),
        ethereum.Value.fromAddressArray(path)
      ]
    );

    return new OptionFactory__exercise2Result(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_exercise2(
    _creator: Address,
    _collateral: Address,
    _underlying: Address,
    _strikePrice: BigInt,
    _expiry: BigInt,
    volume: BigInt,
    path: Array<Address>
  ): ethereum.CallResult<OptionFactory__exercise2Result> {
    let result = super.tryCall(
      "exercise",
      "exercise(address,address,address,uint256,uint256,uint256,address[]):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(_creator),
        ethereum.Value.fromAddress(_collateral),
        ethereum.Value.fromAddress(_underlying),
        ethereum.Value.fromUnsignedBigInt(_strikePrice),
        ethereum.Value.fromUnsignedBigInt(_expiry),
        ethereum.Value.fromUnsignedBigInt(volume),
        ethereum.Value.fromAddressArray(path)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionFactory__exercise2Result(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  exercise3(_long: Address, volume: BigInt): OptionFactory__exercise3Result {
    let result = super.call(
      "exercise",
      "exercise(address,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(_long),
        ethereum.Value.fromUnsignedBigInt(volume)
      ]
    );

    return new OptionFactory__exercise3Result(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_exercise3(
    _long: Address,
    volume: BigInt
  ): ethereum.CallResult<OptionFactory__exercise3Result> {
    let result = super.tryCall(
      "exercise",
      "exercise(address,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(_long),
        ethereum.Value.fromUnsignedBigInt(volume)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionFactory__exercise3Result(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  exercise4(
    long: Address,
    path: Array<Address>
  ): OptionFactory__exercise4Result {
    let result = super.call(
      "exercise",
      "exercise(address,address[]):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(long), ethereum.Value.fromAddressArray(path)]
    );

    return new OptionFactory__exercise4Result(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_exercise4(
    long: Address,
    path: Array<Address>
  ): ethereum.CallResult<OptionFactory__exercise4Result> {
    let result = super.tryCall(
      "exercise",
      "exercise(address,address[]):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(long), ethereum.Value.fromAddressArray(path)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionFactory__exercise4Result(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  exercise_(
    buyer: Address,
    _creator: Address,
    _collateral: Address,
    _underlying: Address,
    _strikePrice: BigInt,
    _expiry: BigInt,
    volume: BigInt,
    path: Array<Address>
  ): OptionFactory__exercise_Result {
    let result = super.call(
      "exercise_",
      "exercise_(address,address,address,address,uint256,uint256,uint256,address[]):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(buyer),
        ethereum.Value.fromAddress(_creator),
        ethereum.Value.fromAddress(_collateral),
        ethereum.Value.fromAddress(_underlying),
        ethereum.Value.fromUnsignedBigInt(_strikePrice),
        ethereum.Value.fromUnsignedBigInt(_expiry),
        ethereum.Value.fromUnsignedBigInt(volume),
        ethereum.Value.fromAddressArray(path)
      ]
    );

    return new OptionFactory__exercise_Result(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_exercise_(
    buyer: Address,
    _creator: Address,
    _collateral: Address,
    _underlying: Address,
    _strikePrice: BigInt,
    _expiry: BigInt,
    volume: BigInt,
    path: Array<Address>
  ): ethereum.CallResult<OptionFactory__exercise_Result> {
    let result = super.tryCall(
      "exercise_",
      "exercise_(address,address,address,address,uint256,uint256,uint256,address[]):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(buyer),
        ethereum.Value.fromAddress(_creator),
        ethereum.Value.fromAddress(_collateral),
        ethereum.Value.fromAddress(_underlying),
        ethereum.Value.fromUnsignedBigInt(_strikePrice),
        ethereum.Value.fromUnsignedBigInt(_expiry),
        ethereum.Value.fromUnsignedBigInt(volume),
        ethereum.Value.fromAddressArray(path)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionFactory__exercise_Result(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getConfig(key: Bytes, addr: Address): BigInt {
    let result = super.call(
      "getConfig",
      "getConfig(bytes32,address):(uint256)",
      [ethereum.Value.fromFixedBytes(key), ethereum.Value.fromAddress(addr)]
    );

    return result[0].toBigInt();
  }

  try_getConfig(key: Bytes, addr: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getConfig",
      "getConfig(bytes32,address):(uint256)",
      [ethereum.Value.fromFixedBytes(key), ethereum.Value.fromAddress(addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getConfig1(key: Bytes): BigInt {
    let result = super.call("getConfig", "getConfig(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(key)
    ]);

    return result[0].toBigInt();
  }

  try_getConfig1(key: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getConfig", "getConfig(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(key)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getConfig2(key: Bytes, index: BigInt): BigInt {
    let result = super.call(
      "getConfig",
      "getConfig(bytes32,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(key),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_getConfig2(key: Bytes, index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getConfig",
      "getConfig(bytes32,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(key),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  governor(): Address {
    let result = super.call("governor", "governor():(address)", []);

    return result[0].toAddress();
  }

  try_governor(): ethereum.CallResult<Address> {
    let result = super.tryCall("governor", "governor():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  length(): BigInt {
    let result = super.call("length", "length():(uint256)", []);

    return result[0].toBigInt();
  }

  try_length(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("length", "length():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  longs(
    param0: Address,
    param1: Address,
    param2: Address,
    param3: BigInt,
    param4: BigInt
  ): Address {
    let result = super.call(
      "longs",
      "longs(address,address,address,uint256,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromAddress(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromUnsignedBigInt(param4)
      ]
    );

    return result[0].toAddress();
  }

  try_longs(
    param0: Address,
    param1: Address,
    param2: Address,
    param3: BigInt,
    param4: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "longs",
      "longs(address,address,address,uint256,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromAddress(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromUnsignedBigInt(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  mint(longOrShort: Address, volume: BigInt): OptionFactory__mintResult {
    let result = super.call(
      "mint",
      "mint(address,uint256):(address,address,uint256)",
      [
        ethereum.Value.fromAddress(longOrShort),
        ethereum.Value.fromUnsignedBigInt(volume)
      ]
    );

    return new OptionFactory__mintResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt()
    );
  }

  try_mint(
    longOrShort: Address,
    volume: BigInt
  ): ethereum.CallResult<OptionFactory__mintResult> {
    let result = super.tryCall(
      "mint",
      "mint(address,uint256):(address,address,uint256)",
      [
        ethereum.Value.fromAddress(longOrShort),
        ethereum.Value.fromUnsignedBigInt(volume)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionFactory__mintResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt()
      )
    );
  }

  mint1(
    _private: boolean,
    _collateral: Address,
    _underlying: Address,
    _strikePrice: BigInt,
    _expiry: BigInt,
    volume: BigInt
  ): OptionFactory__mint1Result {
    let result = super.call(
      "mint",
      "mint(bool,address,address,uint256,uint256,uint256):(address,address,uint256)",
      [
        ethereum.Value.fromBoolean(_private),
        ethereum.Value.fromAddress(_collateral),
        ethereum.Value.fromAddress(_underlying),
        ethereum.Value.fromUnsignedBigInt(_strikePrice),
        ethereum.Value.fromUnsignedBigInt(_expiry),
        ethereum.Value.fromUnsignedBigInt(volume)
      ]
    );

    return new OptionFactory__mint1Result(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt()
    );
  }

  try_mint1(
    _private: boolean,
    _collateral: Address,
    _underlying: Address,
    _strikePrice: BigInt,
    _expiry: BigInt,
    volume: BigInt
  ): ethereum.CallResult<OptionFactory__mint1Result> {
    let result = super.tryCall(
      "mint",
      "mint(bool,address,address,uint256,uint256,uint256):(address,address,uint256)",
      [
        ethereum.Value.fromBoolean(_private),
        ethereum.Value.fromAddress(_collateral),
        ethereum.Value.fromAddress(_underlying),
        ethereum.Value.fromUnsignedBigInt(_strikePrice),
        ethereum.Value.fromUnsignedBigInt(_expiry),
        ethereum.Value.fromUnsignedBigInt(volume)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionFactory__mint1Result(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt()
      )
    );
  }

  mint_(
    sender: Address,
    _private: boolean,
    _collateral: Address,
    _underlying: Address,
    _strikePrice: BigInt,
    _expiry: BigInt,
    volume: BigInt
  ): OptionFactory__mint_Result {
    let result = super.call(
      "mint_",
      "mint_(address,bool,address,address,uint256,uint256,uint256):(address,address,uint256)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromBoolean(_private),
        ethereum.Value.fromAddress(_collateral),
        ethereum.Value.fromAddress(_underlying),
        ethereum.Value.fromUnsignedBigInt(_strikePrice),
        ethereum.Value.fromUnsignedBigInt(_expiry),
        ethereum.Value.fromUnsignedBigInt(volume)
      ]
    );

    return new OptionFactory__mint_Result(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt()
    );
  }

  try_mint_(
    sender: Address,
    _private: boolean,
    _collateral: Address,
    _underlying: Address,
    _strikePrice: BigInt,
    _expiry: BigInt,
    volume: BigInt
  ): ethereum.CallResult<OptionFactory__mint_Result> {
    let result = super.tryCall(
      "mint_",
      "mint_(address,bool,address,address,uint256,uint256,uint256):(address,address,uint256)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromBoolean(_private),
        ethereum.Value.fromAddress(_collateral),
        ethereum.Value.fromAddress(_underlying),
        ethereum.Value.fromUnsignedBigInt(_strikePrice),
        ethereum.Value.fromUnsignedBigInt(_expiry),
        ethereum.Value.fromUnsignedBigInt(volume)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionFactory__mint_Result(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt()
      )
    );
  }

  pack_maturity_expiry(maturity: BigInt, expiry: BigInt): BigInt {
    let result = super.call(
      "pack_maturity_expiry",
      "pack_maturity_expiry(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(maturity),
        ethereum.Value.fromUnsignedBigInt(expiry)
      ]
    );

    return result[0].toBigInt();
  }

  try_pack_maturity_expiry(
    maturity: BigInt,
    expiry: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pack_maturity_expiry",
      "pack_maturity_expiry(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(maturity),
        ethereum.Value.fromUnsignedBigInt(expiry)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  productImplementations(param0: Bytes): Address {
    let result = super.call(
      "productImplementations",
      "productImplementations(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toAddress();
  }

  try_productImplementations(param0: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "productImplementations",
      "productImplementations(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  settle(short: Address, volume: BigInt): OptionFactory__settleResult {
    let result = super.call(
      "settle",
      "settle(address,uint256):(uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(short),
        ethereum.Value.fromUnsignedBigInt(volume)
      ]
    );

    return new OptionFactory__settleResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_settle(
    short: Address,
    volume: BigInt
  ): ethereum.CallResult<OptionFactory__settleResult> {
    let result = super.tryCall(
      "settle",
      "settle(address,uint256):(uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(short),
        ethereum.Value.fromUnsignedBigInt(volume)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionFactory__settleResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  settle1(short: Address): OptionFactory__settle1Result {
    let result = super.call(
      "settle",
      "settle(address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(short)]
    );

    return new OptionFactory__settle1Result(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_settle1(
    short: Address
  ): ethereum.CallResult<OptionFactory__settle1Result> {
    let result = super.tryCall(
      "settle",
      "settle(address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(short)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionFactory__settle1Result(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  settle2(
    _creator: Address,
    _collateral: Address,
    _underlying: Address,
    _strikePrice: BigInt,
    _expiry: BigInt,
    volume: BigInt
  ): OptionFactory__settle2Result {
    let result = super.call(
      "settle",
      "settle(address,address,address,uint256,uint256,uint256):(uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(_creator),
        ethereum.Value.fromAddress(_collateral),
        ethereum.Value.fromAddress(_underlying),
        ethereum.Value.fromUnsignedBigInt(_strikePrice),
        ethereum.Value.fromUnsignedBigInt(_expiry),
        ethereum.Value.fromUnsignedBigInt(volume)
      ]
    );

    return new OptionFactory__settle2Result(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_settle2(
    _creator: Address,
    _collateral: Address,
    _underlying: Address,
    _strikePrice: BigInt,
    _expiry: BigInt,
    volume: BigInt
  ): ethereum.CallResult<OptionFactory__settle2Result> {
    let result = super.tryCall(
      "settle",
      "settle(address,address,address,uint256,uint256,uint256):(uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(_creator),
        ethereum.Value.fromAddress(_collateral),
        ethereum.Value.fromAddress(_underlying),
        ethereum.Value.fromUnsignedBigInt(_strikePrice),
        ethereum.Value.fromUnsignedBigInt(_expiry),
        ethereum.Value.fromUnsignedBigInt(volume)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionFactory__settle2Result(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  settle_(
    sender: Address,
    short: Address,
    volume: BigInt
  ): OptionFactory__settle_Result {
    let result = super.call(
      "settle_",
      "settle_(address,address,uint256):(uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(short),
        ethereum.Value.fromUnsignedBigInt(volume)
      ]
    );

    return new OptionFactory__settle_Result(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_settle_(
    sender: Address,
    short: Address,
    volume: BigInt
  ): ethereum.CallResult<OptionFactory__settle_Result> {
    let result = super.tryCall(
      "settle_",
      "settle_(address,address,uint256):(uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(short),
        ethereum.Value.fromUnsignedBigInt(volume)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionFactory__settle_Result(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  settleable(
    _creator: Address,
    _collateral: Address,
    _underlying: Address,
    _strikePrice: BigInt,
    _expiry: BigInt,
    volume: BigInt
  ): OptionFactory__settleableResult {
    let result = super.call(
      "settleable",
      "settleable(address,address,address,uint256,uint256,uint256):(uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(_creator),
        ethereum.Value.fromAddress(_collateral),
        ethereum.Value.fromAddress(_underlying),
        ethereum.Value.fromUnsignedBigInt(_strikePrice),
        ethereum.Value.fromUnsignedBigInt(_expiry),
        ethereum.Value.fromUnsignedBigInt(volume)
      ]
    );

    return new OptionFactory__settleableResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_settleable(
    _creator: Address,
    _collateral: Address,
    _underlying: Address,
    _strikePrice: BigInt,
    _expiry: BigInt,
    volume: BigInt
  ): ethereum.CallResult<OptionFactory__settleableResult> {
    let result = super.tryCall(
      "settleable",
      "settleable(address,address,address,uint256,uint256,uint256):(uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(_creator),
        ethereum.Value.fromAddress(_collateral),
        ethereum.Value.fromAddress(_underlying),
        ethereum.Value.fromUnsignedBigInt(_strikePrice),
        ethereum.Value.fromUnsignedBigInt(_expiry),
        ethereum.Value.fromUnsignedBigInt(volume)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionFactory__settleableResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  settleable1(
    short: Address,
    volume: BigInt
  ): OptionFactory__settleable1Result {
    let result = super.call(
      "settleable",
      "settleable(address,uint256):(uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(short),
        ethereum.Value.fromUnsignedBigInt(volume)
      ]
    );

    return new OptionFactory__settleable1Result(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_settleable1(
    short: Address,
    volume: BigInt
  ): ethereum.CallResult<OptionFactory__settleable1Result> {
    let result = super.tryCall(
      "settleable",
      "settleable(address,uint256):(uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(short),
        ethereum.Value.fromUnsignedBigInt(volume)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionFactory__settleable1Result(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  settleable2(
    seller: Address,
    short: Address
  ): OptionFactory__settleable2Result {
    let result = super.call(
      "settleable",
      "settleable(address,address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(seller), ethereum.Value.fromAddress(short)]
    );

    return new OptionFactory__settleable2Result(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_settleable2(
    seller: Address,
    short: Address
  ): ethereum.CallResult<OptionFactory__settleable2Result> {
    let result = super.tryCall(
      "settleable",
      "settleable(address,address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(seller), ethereum.Value.fromAddress(short)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OptionFactory__settleable2Result(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  shorts(
    param0: Address,
    param1: Address,
    param2: Address,
    param3: BigInt,
    param4: BigInt
  ): Address {
    let result = super.call(
      "shorts",
      "shorts(address,address,address,uint256,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromAddress(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromUnsignedBigInt(param4)
      ]
    );

    return result[0].toAddress();
  }

  try_shorts(
    param0: Address,
    param1: Address,
    param2: Address,
    param3: BigInt,
    param4: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "shorts",
      "shorts(address,address,address,uint256,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromAddress(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromUnsignedBigInt(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  unpack_expiry(maturity_expiry: BigInt): BigInt {
    let result = super.call(
      "unpack_expiry",
      "unpack_expiry(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(maturity_expiry)]
    );

    return result[0].toBigInt();
  }

  try_unpack_expiry(maturity_expiry: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unpack_expiry",
      "unpack_expiry(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(maturity_expiry)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unpack_maturity(maturity_expiry: BigInt): BigInt {
    let result = super.call(
      "unpack_maturity",
      "unpack_maturity(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(maturity_expiry)]
    );

    return result[0].toBigInt();
  }

  try_unpack_maturity(maturity_expiry: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unpack_maturity",
      "unpack_maturity(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(maturity_expiry)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get _creator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _collateral(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _underlying(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _strikePrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _expiry(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get volume(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get long(): Address {
    return this._call.outputValues[0].value.toAddress();
  }

  get short(): Address {
    return this._call.outputValues[1].value.toAddress();
  }

  get vol(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class Burn1Call extends ethereum.Call {
  get inputs(): Burn1Call__Inputs {
    return new Burn1Call__Inputs(this);
  }

  get outputs(): Burn1Call__Outputs {
    return new Burn1Call__Outputs(this);
  }
}

export class Burn1Call__Inputs {
  _call: Burn1Call;

  constructor(call: Burn1Call) {
    this._call = call;
  }

  get longOrShort(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get volume(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Burn1Call__Outputs {
  _call: Burn1Call;

  constructor(call: Burn1Call) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.outputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class CreateOptionCall extends ethereum.Call {
  get inputs(): CreateOptionCall__Inputs {
    return new CreateOptionCall__Inputs(this);
  }

  get outputs(): CreateOptionCall__Outputs {
    return new CreateOptionCall__Outputs(this);
  }
}

export class CreateOptionCall__Inputs {
  _call: CreateOptionCall;

  constructor(call: CreateOptionCall) {
    this._call = call;
  }

  get _private(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get _collateral(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _underlying(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _strikePrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _expiry(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class CreateOptionCall__Outputs {
  _call: CreateOptionCall;

  constructor(call: CreateOptionCall) {
    this._call = call;
  }

  get long(): Address {
    return this._call.outputValues[0].value.toAddress();
  }

  get short(): Address {
    return this._call.outputValues[1].value.toAddress();
  }
}

export class EmitSettleCall extends ethereum.Call {
  get inputs(): EmitSettleCall__Inputs {
    return new EmitSettleCall__Inputs(this);
  }

  get outputs(): EmitSettleCall__Outputs {
    return new EmitSettleCall__Outputs(this);
  }
}

export class EmitSettleCall__Inputs {
  _call: EmitSettleCall;

  constructor(call: EmitSettleCall) {
    this._call = call;
  }

  get seller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _creator(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _collateral(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _underlying(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _strikePrice(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _expiry(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get vol(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get col(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get fee(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get und(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }
}

export class EmitSettleCall__Outputs {
  _call: EmitSettleCall;

  constructor(call: EmitSettleCall) {
    this._call = call;
  }
}

export class ExerciseCall extends ethereum.Call {
  get inputs(): ExerciseCall__Inputs {
    return new ExerciseCall__Inputs(this);
  }

  get outputs(): ExerciseCall__Outputs {
    return new ExerciseCall__Outputs(this);
  }
}

export class ExerciseCall__Inputs {
  _call: ExerciseCall;

  constructor(call: ExerciseCall) {
    this._call = call;
  }

  get _long(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get volume(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get path(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }
}

export class ExerciseCall__Outputs {
  _call: ExerciseCall;

  constructor(call: ExerciseCall) {
    this._call = call;
  }

  get vol(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get fee(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get amt(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class Exercise1Call extends ethereum.Call {
  get inputs(): Exercise1Call__Inputs {
    return new Exercise1Call__Inputs(this);
  }

  get outputs(): Exercise1Call__Outputs {
    return new Exercise1Call__Outputs(this);
  }
}

export class Exercise1Call__Inputs {
  _call: Exercise1Call;

  constructor(call: Exercise1Call) {
    this._call = call;
  }

  get long(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Exercise1Call__Outputs {
  _call: Exercise1Call;

  constructor(call: Exercise1Call) {
    this._call = call;
  }

  get vol(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get fee(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get amt(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class Exercise2Call extends ethereum.Call {
  get inputs(): Exercise2Call__Inputs {
    return new Exercise2Call__Inputs(this);
  }

  get outputs(): Exercise2Call__Outputs {
    return new Exercise2Call__Outputs(this);
  }
}

export class Exercise2Call__Inputs {
  _call: Exercise2Call;

  constructor(call: Exercise2Call) {
    this._call = call;
  }

  get _creator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _collateral(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _underlying(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _strikePrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _expiry(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get volume(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get path(): Array<Address> {
    return this._call.inputValues[6].value.toAddressArray();
  }
}

export class Exercise2Call__Outputs {
  _call: Exercise2Call;

  constructor(call: Exercise2Call) {
    this._call = call;
  }

  get vol(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get fee(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get amt(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class Exercise3Call extends ethereum.Call {
  get inputs(): Exercise3Call__Inputs {
    return new Exercise3Call__Inputs(this);
  }

  get outputs(): Exercise3Call__Outputs {
    return new Exercise3Call__Outputs(this);
  }
}

export class Exercise3Call__Inputs {
  _call: Exercise3Call;

  constructor(call: Exercise3Call) {
    this._call = call;
  }

  get _long(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get volume(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Exercise3Call__Outputs {
  _call: Exercise3Call;

  constructor(call: Exercise3Call) {
    this._call = call;
  }

  get vol(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get fee(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get amt(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class Exercise4Call extends ethereum.Call {
  get inputs(): Exercise4Call__Inputs {
    return new Exercise4Call__Inputs(this);
  }

  get outputs(): Exercise4Call__Outputs {
    return new Exercise4Call__Outputs(this);
  }
}

export class Exercise4Call__Inputs {
  _call: Exercise4Call;

  constructor(call: Exercise4Call) {
    this._call = call;
  }

  get long(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get path(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class Exercise4Call__Outputs {
  _call: Exercise4Call;

  constructor(call: Exercise4Call) {
    this._call = call;
  }

  get vol(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get fee(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get amt(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class Exercise_Call extends ethereum.Call {
  get inputs(): Exercise_Call__Inputs {
    return new Exercise_Call__Inputs(this);
  }

  get outputs(): Exercise_Call__Outputs {
    return new Exercise_Call__Outputs(this);
  }
}

export class Exercise_Call__Inputs {
  _call: Exercise_Call;

  constructor(call: Exercise_Call) {
    this._call = call;
  }

  get buyer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _creator(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _collateral(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _underlying(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _strikePrice(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _expiry(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get volume(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get path(): Array<Address> {
    return this._call.inputValues[7].value.toAddressArray();
  }
}

export class Exercise_Call__Outputs {
  _call: Exercise_Call;

  constructor(call: Exercise_Call) {
    this._call = call;
  }

  get vol(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get fee(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get amt(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _governor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _implLongOption(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _implShortOption(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _feeRecipient(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _mintOnlyBy(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class Initialize1Call extends ethereum.Call {
  get inputs(): Initialize1Call__Inputs {
    return new Initialize1Call__Inputs(this);
  }

  get outputs(): Initialize1Call__Outputs {
    return new Initialize1Call__Outputs(this);
  }
}

export class Initialize1Call__Inputs {
  _call: Initialize1Call;

  constructor(call: Initialize1Call) {
    this._call = call;
  }

  get governor_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Initialize1Call__Outputs {
  _call: Initialize1Call;

  constructor(call: Initialize1Call) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get longOrShort(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get volume(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.outputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class Mint1Call extends ethereum.Call {
  get inputs(): Mint1Call__Inputs {
    return new Mint1Call__Inputs(this);
  }

  get outputs(): Mint1Call__Outputs {
    return new Mint1Call__Outputs(this);
  }
}

export class Mint1Call__Inputs {
  _call: Mint1Call;

  constructor(call: Mint1Call) {
    this._call = call;
  }

  get _private(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get _collateral(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _underlying(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _strikePrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _expiry(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get volume(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class Mint1Call__Outputs {
  _call: Mint1Call;

  constructor(call: Mint1Call) {
    this._call = call;
  }

  get long(): Address {
    return this._call.outputValues[0].value.toAddress();
  }

  get short(): Address {
    return this._call.outputValues[1].value.toAddress();
  }

  get vol(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class Mint_Call extends ethereum.Call {
  get inputs(): Mint_Call__Inputs {
    return new Mint_Call__Inputs(this);
  }

  get outputs(): Mint_Call__Outputs {
    return new Mint_Call__Outputs(this);
  }
}

export class Mint_Call__Inputs {
  _call: Mint_Call;

  constructor(call: Mint_Call) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _private(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get _collateral(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _underlying(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _strikePrice(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _expiry(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get volume(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class Mint_Call__Outputs {
  _call: Mint_Call;

  constructor(call: Mint_Call) {
    this._call = call;
  }

  get long(): Address {
    return this._call.outputValues[0].value.toAddress();
  }

  get short(): Address {
    return this._call.outputValues[1].value.toAddress();
  }

  get vol(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class RenounceGovernorshipCall extends ethereum.Call {
  get inputs(): RenounceGovernorshipCall__Inputs {
    return new RenounceGovernorshipCall__Inputs(this);
  }

  get outputs(): RenounceGovernorshipCall__Outputs {
    return new RenounceGovernorshipCall__Outputs(this);
  }
}

export class RenounceGovernorshipCall__Inputs {
  _call: RenounceGovernorshipCall;

  constructor(call: RenounceGovernorshipCall) {
    this._call = call;
  }
}

export class RenounceGovernorshipCall__Outputs {
  _call: RenounceGovernorshipCall;

  constructor(call: RenounceGovernorshipCall) {
    this._call = call;
  }
}

export class SetConfigCall extends ethereum.Call {
  get inputs(): SetConfigCall__Inputs {
    return new SetConfigCall__Inputs(this);
  }

  get outputs(): SetConfigCall__Outputs {
    return new SetConfigCall__Outputs(this);
  }
}

export class SetConfigCall__Inputs {
  _call: SetConfigCall;

  constructor(call: SetConfigCall) {
    this._call = call;
  }

  get key(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetConfigCall__Outputs {
  _call: SetConfigCall;

  constructor(call: SetConfigCall) {
    this._call = call;
  }
}

export class SetConfig1Call extends ethereum.Call {
  get inputs(): SetConfig1Call__Inputs {
    return new SetConfig1Call__Inputs(this);
  }

  get outputs(): SetConfig1Call__Outputs {
    return new SetConfig1Call__Outputs(this);
  }
}

export class SetConfig1Call__Inputs {
  _call: SetConfig1Call;

  constructor(call: SetConfig1Call) {
    this._call = call;
  }

  get key(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get addr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetConfig1Call__Outputs {
  _call: SetConfig1Call;

  constructor(call: SetConfig1Call) {
    this._call = call;
  }
}

export class SetConfig2Call extends ethereum.Call {
  get inputs(): SetConfig2Call__Inputs {
    return new SetConfig2Call__Inputs(this);
  }

  get outputs(): SetConfig2Call__Outputs {
    return new SetConfig2Call__Outputs(this);
  }
}

export class SetConfig2Call__Inputs {
  _call: SetConfig2Call;

  constructor(call: SetConfig2Call) {
    this._call = call;
  }

  get key(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get index(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetConfig2Call__Outputs {
  _call: SetConfig2Call;

  constructor(call: SetConfig2Call) {
    this._call = call;
  }
}

export class SettleCall extends ethereum.Call {
  get inputs(): SettleCall__Inputs {
    return new SettleCall__Inputs(this);
  }

  get outputs(): SettleCall__Outputs {
    return new SettleCall__Outputs(this);
  }
}

export class SettleCall__Inputs {
  _call: SettleCall;

  constructor(call: SettleCall) {
    this._call = call;
  }

  get short(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get volume(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SettleCall__Outputs {
  _call: SettleCall;

  constructor(call: SettleCall) {
    this._call = call;
  }

  get vol(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get col(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get fee(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }

  get und(): BigInt {
    return this._call.outputValues[3].value.toBigInt();
  }
}

export class Settle1Call extends ethereum.Call {
  get inputs(): Settle1Call__Inputs {
    return new Settle1Call__Inputs(this);
  }

  get outputs(): Settle1Call__Outputs {
    return new Settle1Call__Outputs(this);
  }
}

export class Settle1Call__Inputs {
  _call: Settle1Call;

  constructor(call: Settle1Call) {
    this._call = call;
  }

  get short(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Settle1Call__Outputs {
  _call: Settle1Call;

  constructor(call: Settle1Call) {
    this._call = call;
  }

  get vol(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get col(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get fee(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }

  get und(): BigInt {
    return this._call.outputValues[3].value.toBigInt();
  }
}

export class Settle2Call extends ethereum.Call {
  get inputs(): Settle2Call__Inputs {
    return new Settle2Call__Inputs(this);
  }

  get outputs(): Settle2Call__Outputs {
    return new Settle2Call__Outputs(this);
  }
}

export class Settle2Call__Inputs {
  _call: Settle2Call;

  constructor(call: Settle2Call) {
    this._call = call;
  }

  get _creator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _collateral(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _underlying(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _strikePrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _expiry(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get volume(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class Settle2Call__Outputs {
  _call: Settle2Call;

  constructor(call: Settle2Call) {
    this._call = call;
  }

  get vol(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get col(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get fee(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }

  get und(): BigInt {
    return this._call.outputValues[3].value.toBigInt();
  }
}

export class Settle_Call extends ethereum.Call {
  get inputs(): Settle_Call__Inputs {
    return new Settle_Call__Inputs(this);
  }

  get outputs(): Settle_Call__Outputs {
    return new Settle_Call__Outputs(this);
  }
}

export class Settle_Call__Inputs {
  _call: Settle_Call;

  constructor(call: Settle_Call) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get short(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get volume(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class Settle_Call__Outputs {
  _call: Settle_Call;

  constructor(call: Settle_Call) {
    this._call = call;
  }

  get vol(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get col(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get fee(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }

  get und(): BigInt {
    return this._call.outputValues[3].value.toBigInt();
  }
}

export class TransferGovernorshipCall extends ethereum.Call {
  get inputs(): TransferGovernorshipCall__Inputs {
    return new TransferGovernorshipCall__Inputs(this);
  }

  get outputs(): TransferGovernorshipCall__Outputs {
    return new TransferGovernorshipCall__Outputs(this);
  }
}

export class TransferGovernorshipCall__Inputs {
  _call: TransferGovernorshipCall;

  constructor(call: TransferGovernorshipCall) {
    this._call = call;
  }

  get newGovernor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferGovernorshipCall__Outputs {
  _call: TransferGovernorshipCall;

  constructor(call: TransferGovernorshipCall) {
    this._call = call;
  }
}

export class UpgradeProductImplementationsToCall extends ethereum.Call {
  get inputs(): UpgradeProductImplementationsToCall__Inputs {
    return new UpgradeProductImplementationsToCall__Inputs(this);
  }

  get outputs(): UpgradeProductImplementationsToCall__Outputs {
    return new UpgradeProductImplementationsToCall__Outputs(this);
  }
}

export class UpgradeProductImplementationsToCall__Inputs {
  _call: UpgradeProductImplementationsToCall;

  constructor(call: UpgradeProductImplementationsToCall) {
    this._call = call;
  }

  get _implLongOption(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _implShortOption(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class UpgradeProductImplementationsToCall__Outputs {
  _call: UpgradeProductImplementationsToCall;

  constructor(call: UpgradeProductImplementationsToCall) {
    this._call = call;
  }
}
