// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Option extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Option entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Option entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Option", id.toString(), this);
  }

  static load(id: string): Option | null {
    return store.get("Option", id) as Option | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get collateral(): Bytes {
    let value = this.get("collateral");
    return value.toBytes();
  }

  set collateral(value: Bytes) {
    this.set("collateral", Value.fromBytes(value));
  }

  get underlying(): Bytes {
    let value = this.get("underlying");
    return value.toBytes();
  }

  set underlying(value: Bytes) {
    this.set("underlying", Value.fromBytes(value));
  }

  get strikePrice(): BigInt {
    let value = this.get("strikePrice");
    return value.toBigInt();
  }

  set strikePrice(value: BigInt) {
    this.set("strikePrice", Value.fromBigInt(value));
  }

  get expiry(): BigInt {
    let value = this.get("expiry");
    return value.toBigInt();
  }

  set expiry(value: BigInt) {
    this.set("expiry", Value.fromBigInt(value));
  }

  get long(): Bytes {
    let value = this.get("long");
    return value.toBytes();
  }

  set long(value: Bytes) {
    this.set("long", Value.fromBytes(value));
  }

  get short(): Bytes {
    let value = this.get("short");
    return value.toBytes();
  }

  set short(value: Bytes) {
    this.set("short", Value.fromBytes(value));
  }

  get asks(): Array<string> {
    let value = this.get("asks");
    return value.toStringArray();
  }

  set asks(value: Array<string>) {
    this.set("asks", Value.fromStringArray(value));
  }
}

export class OrderAsk extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save OrderAsk entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save OrderAsk entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("OrderAsk", id.toString(), this);
  }

  static load(id: string): OrderAsk | null {
    return store.get("OrderAsk", id) as OrderAsk | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get askID(): BigInt {
    let value = this.get("askID");
    return value.toBigInt();
  }

  set askID(value: BigInt) {
    this.set("askID", Value.fromBigInt(value));
  }

  get binds(): Array<string> {
    let value = this.get("binds");
    return value.toStringArray();
  }

  set binds(value: Array<string>) {
    this.set("binds", Value.fromStringArray(value));
  }

  get seller(): Bytes {
    let value = this.get("seller");
    return value.toBytes();
  }

  set seller(value: Bytes) {
    this.set("seller", Value.fromBytes(value));
  }

  get long(): Bytes {
    let value = this.get("long");
    return value.toBytes();
  }

  set long(value: Bytes) {
    this.set("long", Value.fromBytes(value));
  }

  get volume(): BigInt {
    let value = this.get("volume");
    return value.toBigInt();
  }

  set volume(value: BigInt) {
    this.set("volume", Value.fromBigInt(value));
  }

  get settleToken(): Bytes {
    let value = this.get("settleToken");
    return value.toBytes();
  }

  set settleToken(value: Bytes) {
    this.set("settleToken", Value.fromBytes(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get isCancel(): boolean {
    let value = this.get("isCancel");
    return value.toBoolean();
  }

  set isCancel(value: boolean) {
    this.set("isCancel", Value.fromBoolean(value));
  }

  get option(): string {
    let value = this.get("option");
    return value.toString();
  }

  set option(value: string) {
    this.set("option", Value.fromString(value));
  }
}

export class OrderBid extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save OrderBid entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save OrderBid entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("OrderBid", id.toString(), this);
  }

  static load(id: string): OrderBid | null {
    return store.get("OrderBid", id) as OrderBid | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get bidID(): BigInt {
    let value = this.get("bidID");
    return value.toBigInt();
  }

  set bidID(value: BigInt) {
    this.set("bidID", Value.fromBigInt(value));
  }

  get askID(): BigInt {
    let value = this.get("askID");
    return value.toBigInt();
  }

  set askID(value: BigInt) {
    this.set("askID", Value.fromBigInt(value));
  }

  get buyer(): Bytes {
    let value = this.get("buyer");
    return value.toBytes();
  }

  set buyer(value: Bytes) {
    this.set("buyer", Value.fromBytes(value));
  }

  get volume(): BigInt {
    let value = this.get("volume");
    return value.toBigInt();
  }

  set volume(value: BigInt) {
    this.set("volume", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get orderAsk(): string {
    let value = this.get("orderAsk");
    return value.toString();
  }

  set orderAsk(value: string) {
    this.set("orderAsk", Value.fromString(value));
  }
}
