type Option @entity {
  id: ID!
  creator: Bytes!
  collateral: Bytes!
  underlying: Bytes!
  strikePrice: BigInt!
  expiry: BigInt!
  long: Bytes!
  short: Bytes!
  asks: [OrderAsk!]! @derivedFrom(field: "option")
}

type OrderAsk @entity {
  id: ID!
  askID: BigInt!
  binds: [OrderBid!]! @derivedFrom(field: "orderAsk")
  seller: Bytes!
  long: Bytes!
  volume: BigInt!
  settleToken: Bytes!
  price: BigInt!
  isCancel: Boolean!
  option: Option!
}

type OrderBid @entity {
  id: ID!
  bidID: BigInt!
  askID: BigInt!
  buyer: Bytes!
  volume: BigInt!
  amount: BigInt!
  orderAsk: OrderAsk!
}  



type Token @entity {
  id: ID!
  holders: BigInt!
  holders1000: BigInt!
  holders2000: BigInt!
  holders5000: BigInt!
  holders10000: BigInt!
  holders20000: BigInt!
  holders50000: BigInt!
}

type TokenDay @entity {
  id: ID!
  date: Int!
  holders: BigInt!
  holders1000: BigInt!
  holders2000: BigInt!
  holders5000: BigInt!
  holders10000: BigInt!
  holders20000: BigInt!
  holders50000: BigInt!
}

type Account @entity {
  id: ID!
  address: Bytes!
  balance: BigInt!
  stake: BigInt!
  total: BigInt!
  createdAt: BigInt!
  pools: [AccountPool!]! @derivedFrom(field: "account")
}

type Pool @entity {
  id: ID!
  address: String!
  total: BigInt!
  amount: BigInt!
  createdAt: BigInt!
  accounts: [AccountPool!]! @derivedFrom(field: "pool")
}

type PoolDay @entity {
  id: ID!
  address: String!,
  date: Int!
  total: BigInt!
  amount: BigInt!
}

type AccountPool @entity {
  id: ID!
  accountAddress: Bytes!
  poolAddress: String!
  amount: BigInt!
  createdAt: BigInt!
  pool: Pool!
  account: Account!
}
